import { Middleware, NextMiddleware } from './types';
export declare type BranchMiddlewareConditionFunction<T> = (context: T) => boolean;
export declare type BranchMiddlewareCondition<T> = BranchMiddlewareConditionFunction<T> | boolean;
export declare const getBranchMiddleware: <T>(condition: BranchMiddlewareCondition<T>, trueMiddleware: Middleware<T>, falseMiddleware: Middleware<T>) => Middleware<T>;
export declare const getOptionalMiddleware: <T>(condition: BranchMiddlewareCondition<T>, optionalMiddleware: Middleware<T>) => Middleware<T>;
export declare const getFilterMiddleware: <T>(condition: BranchMiddlewareCondition<T>, filterMiddleware: Middleware<T>) => Middleware<T>;
export declare const getBeforeMiddleware: <T>(beforeMiddleware: Middleware<T>, middleware: Middleware<T>) => (context: T, next: NextMiddleware) => Promise<void>;
export declare const getAfterMiddleware: <T>(middleware: Middleware<T>, afterMiddleware: Middleware<T>) => (context: T, next: NextMiddleware) => Promise<void>;
